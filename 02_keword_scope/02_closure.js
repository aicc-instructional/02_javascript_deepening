/*
# 클로저 (Closure)

클로저는 함수와 그 함수가 선언된 렉시컬 환경의 조합입니다. 클로저를 사용하면 함수가 외부 스코프의 변수에 접근할 수 있는 능력을 제공합니다. 특히, 클로저는 다음과 같은 특징을 가집니다:

1. 상태 유지: 클로저는 외부 함수의 변수를 기억할 수 있으므로, 상태를 유지하는 데 유용합니다. 예를 들어, 카운터와 같은 기능을 구현할 수 있습니다.
2. 데이터 은닉: 클로저를 통해 외부에서 접근할 수 없는 변수를 만들 수 있으며, 이는 데이터 은닉을 가능하게 합니다.
3. 함수의 프라이빗 변수: 클로저를 사용하여 특정 변수에 대한 접근을 제한할 수 있어, 객체 지향 프로그래밍의 캡슐화와 유사한 효과를 얻을 수 있습니다.

아래의 코드는 클로저를 사용하여 카운터를 생성하는 예입니다.
*/

function createCounter() {
    let count = 0; // 외부 함수의 프라이빗 변수

    return function () { // 클로저: 내부 함수가 외부 변수에 접근
        count++; // count 변수를 증가시킴
        console.log(`현재 카운트: ${count}`); // 현재 카운트를 출력
    };
}

const counter = createCounter(); // createCounter 호출
counter(); // "현재 카운트: 1" 출력
counter(); // "현재 카운트: 2" 출력
